pipeline {

    agent none

    stages {
        stage('build') {
            when {
                anyOf {
                    changeset 'worker.go'
                    changeset 'core/**'
                }
            }
            agent {
                docker {
                    image 'golang:latest'
                    args '-u root'
                }
            }
            steps {
                sh 'go build worker.go'
            }
        }
        stage('test') {
            when {
                anyOf {
                    changeset 'worker.go'
                    changeset 'core/**'
                }
            }
            agent {
                docker {
                    image 'golang:latest'
                    args '-u root'
                }
            }
            steps {
                dir('core') {
                    sh 'go test -v -vet=off'
                }
            }
        }
        stage('package') {
            when {
                branch 'main'
                anyOf {
                    changeset 'worker.go'
                    changeset 'core/**'
                }
            }
            agent {
                docker {
                    image 'golang:latest'
                    args '-u root'
                }
            }
            steps {
                sh 'go build worker.go'
                archiveArtifacts artifacts: 'worker', fingerprint: true, followSymlinks: false, onlyIfSuccessful: true
            }
        }
        stage('docker-package') {
            when {
                branch 'main'
                anyOf {
                    changeset 'worker.go'
                    changeset 'core/**'
                }
            }
            agent any
            steps {
                echo 'building docker package'
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
                        def dockerfile = 'Dockerfile.worker'
                        def workerImage = docker.build('instavote-worker:${env.BUILD_ID}', '-f ${dockerfile} .')
                        workerImage.push()
                        workerImage.push('${env.BRANCH_NAME}')
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Done building pipeline for worker'
        }
    }
}
